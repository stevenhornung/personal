#!/usr/bin/env node /usr/local/bin/coffee
spawn = require('child_process').spawn
readline = require('readline')
rl = readline.createInterface {
  input: process.stdin,
  output: process.stdout
}

usage = ->
  console.log "
    \n Usage: ./project-up [action]\n\n

    Valid Commands\n
    -------------\n
    setup - Setup the servers\n
    deploy - Deploy app to servers\n
    start - Start the selected project\n
    stop - Stop the selected project\n
    restart - Restart the selected project\n
    reconfig - Reconfigure app\n
    logs [-f -n] - Access logs for the selected project\n
  "

runCommand = (project, command, options) ->
  console.log "\n\n----- #{project.toUpperCase()} -----\n"
  process.chdir("private")

  fullOptions =  [command]
  options.forEach (option) ->
    if option
      fullOptions.push option

  child = spawn("mupx", fullOptions)
  child.stdout.on 'data', (chunk) ->
    process.stdout.write chunk.toString('utf8')

  child.stderr.on 'data', (chunk) ->
    process.stdout.write chunk.toString('utf8')

  child.on 'exit', ->
    rl.close()

if process.argv.length < 3
  usage()
  rl.close()
  return

validCommands = ['setup', 'deploy', 'start', 'stop', 'restart', 'reconfig', 'logs']

project = process.cwd().split('/')[-1..][0]
command = process.argv[2]
if command not in validCommands
  console.log "Command not found."
  rl.close()
  return

options = [process.argv[3], process.argv[4]]

console.log """
  ____  _                         _   _
 / ___|| |_ _____   _____ _ __   | | | | ___  _ __ _ __  _   _ _ __   __ _
 \___ \| __/ _ \ \ / / _ \ '_ \  | |_| |/ _ \| '__| '_ \| | | | '_ \ / _\` |
  ___) | |_  __/\ V /  __/ | | | |  _  | (_) | |  | | | | |_| | | | | (_| |
 |____/ \__\___| \_/ \___|_| |_| |_| |_|\___/|_|  |_| |_|\__,_|_| |_|\__, |
                                                                     |___/
"""

rl.question "Please select an environment:\n
  1) Steven Hornung\n
[?] env ", (env) ->
  if env is "1"
    runCommand(project, command, options)
    rl.close()
  else
    console.log "Invalid project."
    rl.close()


